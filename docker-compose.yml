version: "3.8"

services:
  # ---------- Database ----------
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  # ---------- Migrations ----------
  migrate:
    image: migrate/migrate:latest
    profiles: ["dev", "prod"]
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    env_file: .env
    entrypoint: ""
    command: >
      sh -c "
        set -ex

        DBURL='postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable'
        echo '==> Using DBURL: $DBURL'

        if [ \"$MIGRATE_RESET\" = \"1\" ]; then
          echo '>> Dropping schema...'
          /migrate -path=/migrations -database=\"$DBURL\" drop -f
        fi

        echo '>> Running migrations...'
        /migrate -path=/migrations -database=\"$DBURL\" up
      "

  # ---------- SMTP Mock ----------
  smtp-mock:
    build: ./smtp-mock
    ports:
      - "18080:8080"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
    profiles: ["dev", "prod"]

  # ---------- FastAPI App (dev) ----------
  app:
    image: fastapi-hello:latest
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
    env_file: [.env]
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    profiles: ["dev"]

  # ---------- FastAPI App (prod) ----------
  app-prod:
    image: fastapi-hello:latest
    command: >
      gunicorn app.main:app -k uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000 --workers 2 --threads 2 --timeout 60
    ports:
      - "8000:8000"
    env_file: [.env]
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    profiles: ["prod"]

volumes:
  pg_data:
